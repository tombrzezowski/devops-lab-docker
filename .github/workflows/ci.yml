name: CI - Build & Test Dockerized Flask app

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Szybki sanity check aplikacji bez Dockera (łatwiej debugować)
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install deps (pip)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Sanity check - internal Flask test
        run: |
          python - << 'PY'
          import app
          c = app.app.test_client()
          rv = c.get('/')
          print(rv.status_code, rv.data.decode())
          assert rv.status_code == 200
          PY

      # Build obrazu Dockera
      - name: Build Docker image
        run: docker build -t flask-docker-app:ci .

      # Uruchom kontener i sprawdź endpoint
      - name: Run container
        run: |
          docker run -d --rm -p 5000:5000 --name flask-ci flask-docker-app:ci
          for i in {1..20}; do
            if curl -fsS http://localhost:5000/ > /dev/null; then
              echo "App is up"
              break
            fi
            echo "Waiting for app..."
            sleep 3
          done

      - name: Verify endpoint responds 200
        run: |
          HTTP_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" http://localhost:5000/)
          echo "HTTP_CODE=$HTTP_CODE"
          test "$HTTP_CODE" = "200"

      - name: Stop container
        if: always()
        run: docker stop flask-ci
        
 k8s-validate:
    name: Kubernetes manifests validation
    runs-on: ubuntu-latest
    needs: build-test   # opcjonalnie: uruchomi się po sukcesie jobu build-test
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Validate Kubernetes manifests (client dry-run)
        run: |
          kubectl apply --dry-run=client -f k8s/